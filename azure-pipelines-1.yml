trigger:
  branches:
    include:
      - main # Triggers the pipeline on changes to the main branch

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release' # Build config (Debug or Release)
  EmployeeDataFile: './Data/employees.json' # Path to employees.json file

steps:
# Step 1: Cache NuGet Packages
- task: Cache@2
  displayName: 'Cache NuGet Packages'
  inputs:
    key: 'nuget | "$(Agent.OS)"'
    restoreKeys: |
      nuget | "$(Agent.OS)"
    path: $(NUGET_PACKAGES)

# Step 2: Cache .NET SDK Installation
- task: Cache@2
  displayName: 'Cache .NET SDK'
  inputs:
    key: 'dotnet | "$(Agent.OS)"'
    restoreKeys: |
      dotnet | "$(Agent.OS)"
    path: $(DOTNET_INSTALL_DIR)

# Step 3: Checkout Repository
- task: Checkout@1
  displayName: 'Checkout GitHub Repository'

# Step 4: Debug Variables (Helps Identify Issues with Missing Keys)
- script: |
    echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
    echo "EmployeeDataFile = $(EmployeeDataFile)"
    echo "Agent.OS = $(Agent.OS)"
  displayName: 'Debug Variables'

# Step 5: List Files in Repository
- script: |
    echo "Listing files in Build.SourcesDirectory:"
    ls $(Build.SourcesDirectory)
    echo "Listing files in the Data folder:"
    ls ./Data
  displayName: 'List Files in Repository and Data Folder'

# Step 6: Display Employee Data File
- script: |
    if [ -f "$(EmployeeDataFile)" ]; then
      echo "Contents of Employee Data File:"
      cat "$(EmployeeDataFile)"
    else
      echo "File not found: $(EmployeeDataFile)"
    fi
  displayName: 'Display Employee Data File'

# Step 7: Restore NuGet Packages
- script: |
    dotnet restore EmployeeFunctionApp.sln
  displayName: 'Restore NuGet Packages'

# Step 8: Build Solution
- script: |
    dotnet build EmployeeFunctionApp.sln --configuration $(BuildConfiguration)
  displayName: 'Build Solution'

# Step 9: Run Unit Tests
- script: |
    dotnet test EmployeeFunctionApp.sln --configuration $(BuildConfiguration) --no-build
  displayName: 'Run Unit Tests'
