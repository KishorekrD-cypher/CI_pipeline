trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'
  EmployeeDataFile: './Data/employees.json'

steps:
# Step 1: Debug Variables
- script: |
    echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
    echo "EmployeeDataFile: $(EmployeeDataFile)"
    echo "Agent.OS: $(Agent.OS)"
  displayName: 'Debug Variables'

# Step 2: Verify File Locations
- script: |
    echo "Listing repository files..."
    ls $(Build.SourcesDirectory)
    echo "Listing Data folder files..."
    ls $(Build.SourcesDirectory)/Data
  displayName: 'Verify File Locations'

# Step 3: Cache NuGet Packages
- task: Cache@2
  displayName: 'Cache NuGet Packages'
  inputs:
    key: 'nuget'
    path: $(NUGET_PACKAGES)

# Step 4: Cache .NET SDK Installation
- task: Cache@2
  displayName: 'Cache .NET SDK'
  inputs:
    key: 'dotnet'
    path: $(DOTNET_INSTALL_DIR)

# Step 5: Checkout Repository
- task: Checkout@1
  displayName: 'Checkout GitHub Repository'

# Step 6: Test Hardcoded File Path
- script: |
    if [ -f "./Data/employees.json" ]; then
      echo "Contents of Employee Data File:"
      cat "./Data/employees.json"
    else
      echo "File not found: ./Data/employees.json"
    fi
  displayName: 'Test Hardcoded File Path'

# Step 7: Restore NuGet Packages
- script: |
    dotnet restore EmployeeFunctionApp.sln
  displayName: 'Restore NuGet Packages'

# Step 8: Build Solution
- script: |
    dotnet build EmployeeFunctionApp.sln --configuration $(BuildConfiguration)
  displayName: 'Build Solution'

# Step 9: Run Unit Tests
- script: |
    dotnet test EmployeeFunctionApp.sln --configuration $(BuildConfiguration) --no-build
  displayName: 'Run Unit Tests'
